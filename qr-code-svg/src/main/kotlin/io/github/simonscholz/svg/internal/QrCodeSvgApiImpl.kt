package io.github.simonscholz.svg.internal

import io.github.simonscholz.qrcode.QrCodeConfig
import io.github.simonscholz.qrcode.QrLogoConfig
import io.github.simonscholz.qrcode.internal.api.InternalDrawQrCodeFactory
import io.github.simonscholz.svg.QrCodeSvgApi
import io.github.simonscholz.svg.QrCodeSvgConfig
import io.github.simonscholz.svg.QrSvgLogoConfig
import org.apache.batik.dom.GenericDOMImplementation
import org.apache.batik.svggen.SVGGeneratorContext
import org.apache.batik.svggen.SVGGraphics2D
import org.w3c.dom.DOMImplementation
import org.w3c.dom.Document

class QrCodeSvgApiImpl : QrCodeSvgApi {
    override fun createQrCodeSvg(qrCodeSvgConfig: QrCodeSvgConfig): Document {
        val internalDrawQrCode = InternalDrawQrCodeFactory.createInternalDrawQrCode()

        val domImpl: DOMImplementation = GenericDOMImplementation.getDOMImplementation()
        val svgNS = "http://www.w3.org/2000/svg"
        val document = domImpl.createDocument(svgNS, "svg", null)
        val ctx = SVGGeneratorContext.createDefault(document)
        ctx.comment = "Generated by https://github.com/SimonScholz/qr-code-with-logo"
        val svgGraphics = SVGGraphics2D(ctx, false)
        try {
            internalDrawQrCode.drawQrCodeOnGraphics2D(mapQrCodeSvgConfigToQrCodeConfig(qrCodeSvgConfig), svgGraphics)
            adjustDocumentBySvgGraphics(document, svgGraphics)
            addSvgLogo(document, qrCodeSvgConfig)
        } finally {
            svgGraphics.dispose()
        }
        return document
    }

    private fun addSvgLogo(
        document: Document,
        qrCodeConfig: QrCodeSvgConfig,
    ) {
        qrCodeConfig.qrLogoConfig?.let { logoConfig ->
            val root = document.documentElement
            // Get the width and height of the main SVG document
            val mainWidth = qrCodeConfig.qrCodeSize.toDouble()
            val mainHeight = qrCodeConfig.qrCodeSize.toDouble()

            logoConfig.svgLogoDocument?.documentElement?.let { logoElement ->
                // Get the width and height of the logo SVG document
                // FIXME calc width in a proper manner and honor logoConfig.shape properly
                val logoWidth = qrCodeConfig.qrCodeSize.toDouble() * logoConfig.relativeSize
                val logoHeight = qrCodeConfig.qrCodeSize.toDouble() * logoConfig.relativeSize
                // Calculate the position to center the logo in the main document
                val x = (mainWidth - logoWidth) / 2
                val y = (mainHeight - logoHeight) / 2

                logoConfig.bgColor?.let {
                    // Create a rectangle element to act as the background
                    val backgroundRect = document.createElementNS("http://www.w3.org/2000/svg", "rect")
                    backgroundRect.setAttribute("x", x.toString())
                    backgroundRect.setAttribute("y", y.toString())
                    backgroundRect.setAttribute("width", logoWidth.toString())
                    backgroundRect.setAttribute("height", logoHeight.toString())
                    backgroundRect.setAttribute("fill", "rgb(${it.red}, ${it.green}, ${it.blue}")

                    // Append the background rectangle to the main SVG document
                    root.appendChild(backgroundRect)
                }

                // Set the position of the logo
                logoElement.setAttribute("x", x.toString())
                logoElement.setAttribute("y", y.toString())
                logoElement.setAttribute("width", logoWidth.toString())
                logoElement.setAttribute("height", logoHeight.toString())

                // Append the logo to the main SVG document
                val importedLogo = document.importNode(logoElement, true)
                root.appendChild(importedLogo)
            }
        }
    }

    private fun adjustDocumentBySvgGraphics(
        document: Document,
        svgGraphics: SVGGraphics2D,
    ) {
        val root = document.documentElement
        val svgContent = svgGraphics.root
        val svgChildren = svgContent.childNodes
        for (i in 0 until svgChildren.length) {
            val importedNode = document.importNode(svgChildren.item(i), true)
            root.appendChild(importedNode)
        }
    }

    private fun mapQrCodeSvgConfigToQrCodeConfig(qrCodeSvgConfig: QrCodeSvgConfig): QrCodeConfig {
        return QrCodeConfig(
            qrCodeText = qrCodeSvgConfig.qrCodeText,
            qrCodeSize = qrCodeSvgConfig.qrCodeSize,
            qrLogoConfig = qrCodeSvgConfig.qrLogoConfig?.let(::mapQrSvgLogoConfigToQrLogoConfig),
            qrCodeColorConfig = qrCodeSvgConfig.qrCodeColorConfig,
            qrPositionalSquaresConfig = qrCodeSvgConfig.qrPositionalSquaresConfig,
            qrCodeDotStyler = qrCodeSvgConfig.qrCodeDotStyler,
            qrBorderConfig = qrCodeSvgConfig.qrBorderConfig,
        )
    }

    private fun mapQrSvgLogoConfigToQrLogoConfig(qrSvgLogoConfig: QrSvgLogoConfig): QrLogoConfig? {
        if (qrSvgLogoConfig.logo == null && qrSvgLogoConfig.base64Logo == null) {
            return null
        }

        return QrLogoConfig(
            logo = qrSvgLogoConfig.logo,
            base64Logo = qrSvgLogoConfig.base64Logo,
            relativeSize = qrSvgLogoConfig.relativeSize,
            bgColor = qrSvgLogoConfig.bgColor,
            shape = qrSvgLogoConfig.shape,
        )
    }
}
