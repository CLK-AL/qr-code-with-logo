package io.github.simonscholz.svg.internal

import io.github.simonscholz.qrcode.QrCodeConfig
import io.github.simonscholz.qrcode.internal.api.InternalDrawQrCodeFactory
import io.github.simonscholz.svg.QrCodeSvgApi
import io.github.simonscholz.svg.QrSvgLogoConfig
import io.github.simonscholz.svg.applySvgGraphics
import io.github.simonscholz.svg.getSVGDimensions
import org.apache.batik.dom.GenericDOMImplementation
import org.apache.batik.svggen.SVGGeneratorContext
import org.apache.batik.svggen.SVGGraphics2D
import org.w3c.dom.DOMImplementation
import org.w3c.dom.Document

internal class QrCodeSvgApiImpl : QrCodeSvgApi {
    override fun createQrCodeSvg(qrCodeSvgConfig: QrCodeConfig): Document {
        val internalDrawQrCode = InternalDrawQrCodeFactory.createInternalDrawQrCode()

        val domImpl: DOMImplementation = GenericDOMImplementation.getDOMImplementation()
        val svgNS = "http://www.w3.org/2000/svg"
        val document = domImpl.createDocument(svgNS, "svg", null)
        val ctx = SVGGeneratorContext.createDefault(document)
        ctx.comment = "Generated by https://github.com/SimonScholz/qr-code-with-logo"
        val svgGraphics = SVGGraphics2D(ctx, false)
        try {
            internalDrawQrCode.drawQrCodeOnGraphics2D(qrCodeSvgConfig, svgGraphics)
            document.applySvgGraphics(svgGraphics)
            addSvgLogo(document, qrCodeSvgConfig)
        } finally {
            svgGraphics.dispose()
        }
        return document
    }

    private fun addSvgLogo(
        document: Document,
        qrCodeConfig: QrCodeConfig,
    ) {
        qrCodeConfig.qrLogoConfig?.let { logoConfig ->
            if (logoConfig !is QrSvgLogoConfig) {
                // Only handle SVG logos here, other types are handled in the image generation
                return
            }
            drawSvgLogo(document, qrCodeConfig, logoConfig)
        }
    }

    private fun drawSvgLogo(
        document: Document,
        qrCodeConfig: QrCodeConfig,
        logoConfig: QrSvgLogoConfig,
    ) {
        val qrCodeSize = qrCodeConfig.qrCodeSize.toDouble()

        val logoMaxSize = qrCodeSize * logoConfig.relativeSize
        val x = (qrCodeSize - logoMaxSize) / 2
        val y = (qrCodeSize - logoMaxSize) / 2

        val root = document.documentElement
        logoConfig.bgColor?.let { bgColor ->
            BackgroundCreator
                .createBackground(
                    document = document,
                    bgColor = bgColor,
                    logoShape = logoConfig.shape,
                    x = x,
                    y = y,
                    logoMaxSize = logoMaxSize,
                ).let { backgroundRect ->
                    // Append the background rectangle to the main SVG document
                    root.appendChild(backgroundRect)
                }
        }

        val (logoWidth, logoHeight) = logoConfig.svgLogo.getSVGDimensions() ?: (logoMaxSize to logoMaxSize)

        val aspectRatio = logoWidth / logoHeight
        val croppedWidth: Int
        val croppedHeight: Int
        if (aspectRatio >= 1) {
            // Landscape or square logo
            croppedWidth = logoMaxSize.toInt()
            croppedHeight = (croppedWidth / aspectRatio).toInt()
        } else {
            // Portrait logo
            croppedHeight = logoMaxSize.toInt()
            croppedWidth = (croppedHeight * aspectRatio).toInt()
        }

        logoConfig.svgLogo.documentElement.setAttribute("x", x.toString())
        logoConfig.svgLogo.documentElement.setAttribute("y", y.toString())
        logoConfig.svgLogo.documentElement.setAttribute("width", croppedWidth.toString())
        logoConfig.svgLogo.documentElement.setAttribute("height", croppedHeight.toString())

        val importedLogo = document.importNode(logoConfig.svgLogo.documentElement, true)
        root.appendChild(importedLogo)
    }
}
