package io.github.simonscholz.svg.internal

import io.github.simonscholz.qrcode.internal.api.InternalDrawQrCodeFactory
import io.github.simonscholz.svg.QrCodeSvgApi
import io.github.simonscholz.svg.QrCodeSvgConfig
import io.github.simonscholz.svg.applySvgGraphics
import io.github.simonscholz.svg.getSVGDimensions
import org.apache.batik.dom.GenericDOMImplementation
import org.apache.batik.svggen.SVGGeneratorContext
import org.apache.batik.svggen.SVGGraphics2D
import org.w3c.dom.DOMImplementation
import org.w3c.dom.Document

internal class QrCodeSvgApiImpl : QrCodeSvgApi {
    override fun createQrCodeSvg(qrCodeSvgConfig: QrCodeSvgConfig): Document {
        val internalDrawQrCode = InternalDrawQrCodeFactory.createInternalDrawQrCode()

        val domImpl: DOMImplementation = GenericDOMImplementation.getDOMImplementation()
        val svgNS = "http://www.w3.org/2000/svg"
        val document = domImpl.createDocument(svgNS, "svg", null)
        val ctx = SVGGeneratorContext.createDefault(document)
        ctx.comment = "Generated by https://github.com/SimonScholz/qr-code-with-logo"
        val svgGraphics = SVGGraphics2D(ctx, false)
        try {
            internalDrawQrCode.drawQrCodeOnGraphics2D(LogoMapper.mapQrCodeSvgConfigToQrCodeConfig(qrCodeSvgConfig), svgGraphics)
            document.applySvgGraphics(svgGraphics)
            addSvgLogo(document, qrCodeSvgConfig)
        } finally {
            svgGraphics.dispose()
        }
        return document
    }

    private fun addSvgLogo(
        document: Document,
        qrCodeConfig: QrCodeSvgConfig,
    ) {
        qrCodeConfig.qrLogoConfig?.let { logoConfig ->
            logoConfig.svgLogoDocument?.let { svgLogo ->
                val mainWidth = qrCodeConfig.qrCodeSize.toDouble()
                val mainHeight = qrCodeConfig.qrCodeSize.toDouble()

                val (width, height) = svgLogo.getSVGDimensions() ?: (mainWidth to mainHeight)
                val logoWidth = width * logoConfig.relativeSize
                val logoHeight = height * logoConfig.relativeSize

                val x = (mainWidth - logoWidth) / 2
                val y = (mainHeight - logoHeight) / 2

                val root = document.documentElement
                logoConfig.bgColor?.let {
                    // Create a rectangle element to act as the background
                    val backgroundRect = document.createElementNS("http://www.w3.org/2000/svg", "rect")
                    backgroundRect.setAttribute("x", x.toString())
                    backgroundRect.setAttribute("y", y.toString())
                    backgroundRect.setAttribute("width", logoWidth.toString())
                    backgroundRect.setAttribute("height", logoHeight.toString())
                    backgroundRect.setAttribute("fill", "rgb(${it.red}, ${it.green}, ${it.blue}")

                    // Append the background rectangle to the main SVG document
                    root.appendChild(backgroundRect)
                }

                // Set the position of the logo
                val logoElement = svgLogo.documentElement
                logoElement.setAttribute("x", x.toString())
                logoElement.setAttribute("y", y.toString())
                logoElement.setAttribute("width", logoWidth.toString())
                logoElement.setAttribute("height", logoHeight.toString())

                // Append the logo to the main SVG document
                val importedLogo = document.importNode(logoElement, true)
                root.appendChild(importedLogo)
            }
        }
    }
}
